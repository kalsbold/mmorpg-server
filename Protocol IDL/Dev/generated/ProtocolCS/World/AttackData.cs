// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtocolCS.World
{

using global::System;
using global::FlatBuffers;

public struct AttackData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AttackData GetRootAsAttackData(ByteBuffer _bb) { return GetRootAsAttackData(_bb, new AttackData()); }
  public static AttackData GetRootAsAttackData(ByteBuffer _bb, AttackData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AttackData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EntityId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEntityIdBytes() { return __p.__vector_as_arraysegment(4); }
  public float Rotation { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MutateRotation(float rotation) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutFloat(o + __p.bb_pos, rotation); return true; } else { return false; } }

  public static Offset<AttackData> CreateAttackData(FlatBufferBuilder builder,
      StringOffset entity_idOffset = default(StringOffset),
      float rotation = 0.0f) {
    builder.StartObject(2);
    AttackData.AddRotation(builder, rotation);
    AttackData.AddEntityId(builder, entity_idOffset);
    return AttackData.EndAttackData(builder);
  }

  public static void StartAttackData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEntityId(FlatBufferBuilder builder, StringOffset entityIdOffset) { builder.AddOffset(0, entityIdOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(1, rotation, 0.0f); }
  public static Offset<AttackData> EndAttackData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AttackData>(o);
  }
};


}
