namespace ProtocolCS;

// 에러 코드
enum ErrorCode : int {
    OK = 0,
    UNEXPECTED = 1, // 예외 상황 발생
    DATABASE_FAILED = 2, // DB 쿼리 실패
    INVALID_SESSION = 10,   // 잘못된 세션
    INVALID_STRING = 20,    // 잘못된 문자
    // Login
    LOGIN_INCORRECT_ACC_NAME = 100, // 계정명이 잘못됨
    LOGIN_INCORRECT_ACC_PASSWORD, // 패스워드가 잘못됨
    LOGIN_DUPLICATION ,        // 중복 로그인
    // JOIN
    JOIN_ACC_NAME_ALREADY,    // 계정명 중복
    JOIN_CANNOT_ACC_CREATE,   // 계정 생성 실패
    // Create Character
    CREATE_CHARACTER_NAME_ALREADY,
    CREATE_CHARACTER_CANNOT_CREATE,
    CREATE_CHARACTER_ATTRIBUTE_NOT_EXIST, // 능력치 설정 에러
    // Delete Character
    DELETE_CHARACTER_NOT_EXIST,
    DELETE_CHARACTER_CANNOT_DELETE,
    // World
    WORLD_LOGIN_INVALID_CREDENTIAL = 200, // 로그인 실패
    WORLD_LOGIN_INVALID_ACCOUNT,    // 계정이 잘못됨
    WORLD_LOGIN_INVALID_CHARACTER, // 영웅이 존재하지 않음
    WORLD_LOGIN_INVALID_STATE, // 잘못된 상태
    WORLD_CANNOT_ENTER_ZONE, // 지역에 들어갈수 없다
    WORLD_NEXT_INVALID_STATE,
    WORLD_CANNOT_LOAD_CHARACTER,
    WORLD_CANNOT_FIND_ZONE,
}

// 공용 스키마 정의=======================
// 캐릭터 클래스 타입
enum ClassType : int {
    NONE = 0,
    Knight = 1,
    Archer = 2,
    Mage = 3,
}
// 맵 타입
enum MapType : int {
    NONE = 0,
    FIELD = 1,
    DUNGEON = 2,
}

// Vector2
struct Vec2 {
  x:float;
  y:float;
}
// Vector3
struct Vec3 {
  x:float;
  y:float;
  z:float;
}

// 로그인 하지 않은 유저가 로그인이 선결되어야 하는 요청을 했을때 보내는 경고
table Notify_UnauthedAccess {

}

//======================================================================================================================
namespace ProtocolCS.Login;

// 데이터 스키마 정의=====================================
// 간단한 플레이어 캐릭터 정보
table Character {
    uid:int;
    name:string;
    class_type:ClassType;
    level:int;
}

// 메시지 스키마 정의=====================================
// Login
// 로그인을 요청.
table Request_Login {
    user_name:string;
    password:string;
}
// 로그인 성공.
table Reply_LoginSuccess {
    credential:string;
}
// 로그인 실패.
table Reply_LoginFailed {
    error_code:ErrorCode;
}

// Join
// 가입을 요청.
table Request_Join {
    user_name:string;
    password:string;
}
// 가입 성공.
table Reply_JoinSuccess {
}
// 가입 실패.
table Reply_JoinFailed {
    error_code:ErrorCode;
}

// Character List
// 플레이어 캐릭터 리스트를 요청.
table Request_CharacterList {
}
// 캐릭터 리스트 요청 응답.
table Reply_CharacterList {
    list:[Character]; // Vector of tables.
}

// Create Character
// 새 캐릭터 생성을 요청.
table Request_CreateCharacter {
    name:string;
    class_type:ClassType;
}
// 새 캐릭터 생성 성공.
table Reply_CreateCharacterSuccess {
    character:Character; // 생성된 캐릭터 정보
}
// 새 캐릭터 생성 실패.
table Reply_CreateCharacterFailed {
    error_code:ErrorCode;
}

// Delete Character
// 캐릭터 제거를 요청.
table Request_DeleteCharacter {
    character_uid:int;
}
// 캐릭터 제거 성공.
table Reply_DeleteCharacterSuccess {
    character_uid:int;
}
// 캐릭터 제거 실패.
table Reply_DeleteCharacterFailed {
    error_code:ErrorCode;
}

//==================================================================================================================================
namespace ProtocolCS.World;

// 데이터 스키마 정의============================
// 플레이어 캐릭터
table PlayerCharacter {
    entity_id:string;
    name:string;
    class_type:ClassType;
    exp:int;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    att:int;
    def:int;
    map_id:int;
    pos:Vec3;
    rotation:float;
}

// 리모트 플레이어 캐릭터
table RemotePC {
    entity_id:string;
    name:string;
    class_type:ClassType;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    pos:Vec3;
    rotation:float;
}

// 몬스터
table Monster {
    entity_id:string;
    type_id:int;
    name:string;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    pos:Vec3;
    rotation:float;
}

// 이동 정보
table MoveData {
    entity_id:string;
    position:Vec3;
    rotation:float;
    velocity:Vec3;
}
// 공격 정보
table AttackData {
    entity_id:string;
    rotation:float;
}

// 피격 정보
table DamageData {
    entity_id:string;
    damage:int;
}

// 메시지 스키마 정의============================
// Credential 로그인.
table Request_Login {
    credential:string;
    character_uid:int;
}
// 로그인 성공.
table Reply_LoginSuccess {
    character:PlayerCharacter;
}
// 로그인 실패.
table Reply_LoginFailed {
    error_code:ErrorCode;
}

// player Action
// 로컬 케릭터의 이동을 보낸다.
table Request_Move {
    position:Vec3;
    rotation:float;
    velocity:Vec3;
}
// 로컬 케릭터의 공격을 보낸다.
table Request_Attack {
    rotation:float;
}
// 원격 캐릭터 스폰
table Notify_AppearActor {
    remote_pc_list:[RemotePC];
    monster_list:[Monster];
}
// 원격 태릭터 삭제
table Notify_DisappearActor {
    entity_id_list:[string];
}
// 케릭터의 이동 통지
table Notify_Move {
    move_list:[MoveData];
}
// 케릭터의 공격 통지
table Notify_Attack {
    attack_list:[AttackData];
}
// 피격 통지
table Notify_Damage {
    damage_list:[DamageData];
}

// 다른 지역으로 이동 요청.
table Request_MoveZone {
    map_id:int;
}
// 실패
table Reply_MoveZoneFailed {
    error_code:ErrorCode;
}
// 케릭터를 다른 지역으로 이동 통보.
table Notify_EnterZone {
    map_id:int;
    position:Vec3;
    rotation:float;
}

namespace ProtocolCS;

// 메시지 타입을 정의 한다 ========================================================================================================================
union MessageType {
    Notify_UnauthedAccess,
    Login.Request_Login,
    Login.Reply_LoginSuccess,
    Login.Reply_LoginFailed,
    Login.Request_Join,
    Login.Reply_JoinSuccess,
    Login.Reply_JoinFailed,
    Login.Request_CharacterList,
    Login.Reply_CharacterList,
    Login.Request_CreateCharacter,
    Login.Reply_CreateCharacterSuccess,
    Login.Reply_CreateCharacterFailed,
    Login.Request_DeleteCharacter,
    Login.Reply_DeleteCharacterSuccess,
    Login.Reply_DeleteCharacterFailed,
    //===========================================================
    World.Request_Login,
    World.Reply_LoginSuccess,
    World.Reply_LoginFailed,
    World.Request_Move,
    World.Request_Attack,
    World.Notify_AppearActor,
    World.Notify_DisappearActor,
    World.Notify_Move,
    World.Notify_Attack,
    World.Notify_Damage,
    World.Request_MoveZone,
    World.Reply_MoveZoneSuccess,
    World.Reply_MoveZoneFailed,
}

// 기본 네트워크 메시지 =================================================================
table MessageRoot {
    message:MessageType; // Union
}

root_type MessageRoot;

file_identifier "PTCS";