// automatically generated by the FlatBuffers compiler, do not modify

namespace protocol
{

using System;
using FlatBuffers;

public enum MessageT : byte
{
 NONE = 0,
 common_UnauthedAccess = 1000,
 login_RequestLogin = 2000,
 login_ResponseLoginFailed = 2001,
 login_ResponseLoginSuccess = 2002,
 login_RequestJoin = 2003,
 login_ResponseJoinFailed = 2004,
 login_ResponseJoinSuccess = 2005,
 login_RequestCharacterList = 2006,
 login_ResponseCharacterList = 2007,
 login_RequestCreateCharacter = 2008,
 login_ResponseCreateCharacterFailed = 2009,
 login_ResponseCreateCharacterSuccess = 2010,
 login_RequestDeleteCharacter = 2011,
 login_ResponseDeleteCharacterFailed = 2012,
 login_ResponseDeleteCharacterSuccess = 2013,
 game_RequestEnterGame = 3000,
 game_ResponseEnterGameFailed = 3001,
 game_ResponseEnterGameSuccess = 3002,
 game_SpawnCharacter = 3003,
 game_MoveCharacter = 3004,
 manager_RequestLogin = 4000,
 manager_ResponseLoginFailed = 4001,
 manager_ResponseLoginSuccess = 4002,
};

public struct NetMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NetMessage GetRootAsNetMessage(ByteBuffer _bb) { return GetRootAsNetMessage(_bb, new NetMessage()); }
  public static NetMessage GetRootAsNetMessage(ByteBuffer _bb, NetMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NetMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MessageT MessageType { get { int o = __p.__offset(4); return o != 0 ? (MessageT)__p.bb.Get(o + __p.bb_pos) : MessageT.NONE; } }
  public TTable? Message<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<NetMessage> CreateNetMessage(FlatBufferBuilder builder,
      MessageT message_type = MessageT.NONE,
      int messageOffset = 0) {
    builder.StartObject(2);
    NetMessage.AddMessage(builder, messageOffset);
    NetMessage.AddMessageType(builder, message_type);
    return NetMessage.EndNetMessage(builder);
  }

  public static void StartNetMessage(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMessageType(FlatBufferBuilder builder, MessageT messageType) { builder.AddByte(0, (byte)messageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, int messageOffset) { builder.AddOffset(1, messageOffset, 0); }
  public static Offset<NetMessage> EndNetMessage(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NetMessage>(o);
  }
  public static void FinishNetMessageBuffer(FlatBufferBuilder builder, Offset<NetMessage> offset) { builder.Finish(offset.Value); }
};


}
