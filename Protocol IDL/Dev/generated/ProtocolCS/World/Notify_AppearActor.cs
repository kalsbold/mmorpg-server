// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtocolCS.World
{

using global::System;
using global::FlatBuffers;

public struct Notify_AppearActor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Notify_AppearActor GetRootAsNotify_AppearActor(ByteBuffer _bb) { return GetRootAsNotify_AppearActor(_bb, new Notify_AppearActor()); }
  public static Notify_AppearActor GetRootAsNotify_AppearActor(ByteBuffer _bb, Notify_AppearActor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Notify_AppearActor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public RemotePC? RemotePcList(int j) { int o = __p.__offset(4); return o != 0 ? (RemotePC?)(new RemotePC()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RemotePcListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Monster? MonsterList(int j) { int o = __p.__offset(6); return o != 0 ? (Monster?)(new Monster()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MonsterListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Notify_AppearActor> CreateNotify_AppearActor(FlatBufferBuilder builder,
      VectorOffset remote_pc_listOffset = default(VectorOffset),
      VectorOffset monster_listOffset = default(VectorOffset)) {
    builder.StartObject(2);
    Notify_AppearActor.AddMonsterList(builder, monster_listOffset);
    Notify_AppearActor.AddRemotePcList(builder, remote_pc_listOffset);
    return Notify_AppearActor.EndNotify_AppearActor(builder);
  }

  public static void StartNotify_AppearActor(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddRemotePcList(FlatBufferBuilder builder, VectorOffset remotePcListOffset) { builder.AddOffset(0, remotePcListOffset.Value, 0); }
  public static VectorOffset CreateRemotePcListVector(FlatBufferBuilder builder, Offset<RemotePC>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartRemotePcListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMonsterList(FlatBufferBuilder builder, VectorOffset monsterListOffset) { builder.AddOffset(1, monsterListOffset.Value, 0); }
  public static VectorOffset CreateMonsterListVector(FlatBufferBuilder builder, Offset<Monster>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMonsterListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Notify_AppearActor> EndNotify_AppearActor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Notify_AppearActor>(o);
  }
};


}
