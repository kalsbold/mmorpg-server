namespace protocol;

// 에러 코드
enum ErrorCode : int {
    OK = 0,
    UNEXPECTED = 1, // 예외 상황 발생
    DATABASE_FAILED = 2, // DB 쿼리 실패
    INVALID_SESSION = 10,   // 잘못된 세션
    INVALID_STRING = 20,    // 잘못된 문자
    // Login
    LOGIN_INCORRECT_ACC_NAME = 100, // 계정명이 잘못됨
    LOGIN_INCORRECT_ACC_PASSWORD = 101, // 패스워드가 잘못됨
    LOGIN_DUPLICATION = 102,        // 중복 로그인
    // JOIN
    JOIN_ACC_NAME_ALREADY = 200,    // 계정명 중복
    JOIN_CANNOT_ACC_CREATE = 201,   // 계정 생성 실패
    // Create Character
    CREATE_CHARACTER_NAME_ALREADY = 300,
    CREATE_CHARACTER_CANNOT_CREATE = 301,
    CREATE_CHARACTER_ATTRIBUTE_NOT_EXIST = 302, // 능력치 설정 에러
    // Delete Character
    DELETE_CHARACTER_NOT_EXIST = 400,
    DELETE_CHARACTER_CANNOT_DELETE = 401,
    // Enter World
    ENTER_WORLD_INVALID_CHARACTER = 500, // 영웅이 존재하지 않음
    ENTER_WORLD_INVALID_STATE = 501, // 잘못된 상태
    ENTER_WORLD_CANNOT_ENTER_ZONE = 502, // 지역에 들어갈수 없다
    ENTER_WORLD_NEXT_INVALID_STATE = 510,
    ENTER_WORLD_NEXT_CHARACTER_NOT_LOADED = 511,
    ENTER_WORLD_NEXT_CANNOT_FIND_ZONE = 512,
    // World Logic
    WORLD_LOGIC_INVALID_STATE = 600,
    WORLD_LOGIC_ENTER_ZONE_FAILED = 603,
}

// 공용 스키마 정의=======================
// 캐릭터 클래스 타입
enum ClassType : int {
    NONE = 0,
    Knight = 1,
    Archer = 2,
    Mage = 3,
}

enum MapType : int {
    NONE = 0,
    FIELD = 1,
    DUNGEON = 2,
}

// Vector2
struct Vec2 {
  x:float;
  y:float;
}
// Vector3
struct Vec3 {
  x:float;
  y:float;
  z:float;
}

// 로그인 하지 않은 유저가 로그인이 선결되어야 하는 요청을 했을때 보내는 경고
table Notify_UnauthedAccess {
}

//=============================================================================
namespace protocol.login;

// 간단한 플레이어 캐릭터 정보
table Character {
    id:int;
    name:string;
    class_type:ClassType;
    level:int;
}

// Login
// 로그인을 요청
table Request_Login {
    acc_name:string;
    password:string;
}
// 로그인 실패
table Reply_LoginFailed {
    error_code:ErrorCode;
}
// 로그인 성공
table Reply_LoginSuccess {
    auth_key:string;
}

// Join
// 가입을 요청
table Request_Join {
    acc_name:string;
    password:string;
}
// 가입 실패
table Reply_JoinFailed {
    error_code:ErrorCode;
}
// 가입 성공
table Reply_JoinSuccess {
}

// Character List
// 플레이어 캐릭터 리스트를 요청
table Request_CharacterList {
    //auth_key:string;
}
// 캐릭터 리스트
table Reply_CharacterList {
    list:[Character]; // Vector of tables.
}

// Create Character
// 새 캐릭터 생성을 요청
table Request_CreateCharacter {
    name:string;
    class_type:ClassType;
}
// 새 캐릭터 생성 실패
table Reply_CreateCharacterFailed {
    error_code:ErrorCode;
}
// 새 캐릭터 생성 성공
table Reply_CreateCharacterSuccess {
    character:Character; // 생성된 캐릭터 정보
}

// Delete Character
// 캐릭터 제거를 요청
table Request_DeleteCharacter {
    character_id:int;
}
// 캐릭터 제거 실패
table Reply_DeleteCharacterFailed {
    error_code:ErrorCode;
}
// 캐릭터 제거 성공
table Reply_DeleteCharacterSuccess {
    character_id:int;
}

//=============================================================================
namespace protocol.world;

// 플레이어 캐릭터 정보
table PlayerCharacter {
    uuid:string;
    name:string;
    class_type:ClassType;
    exp:int;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    att:int;
    def:int;
    pos:Vec3;
    rotation_y:float;
}

// 리모트 플레이어 캐릭터 정보
table RemotePC {
    uuid:string;
    name:string;
    class_type:ClassType;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    pos:Vec3;
    rotation_y:float;
}
// 몬스터 정보
table Monster {
    uuid:string;
    type_id:int;
    name:string;
    level:int;
    max_hp:int;
    hp:int;
    max_mp:int;
    mp:int;
    pos:Vec3;
    rotation_y:float;
}

// 이동 및 위치 정보
struct MoveInfo {
    rotation:float;
    pos:Vec3;
    velocity:Vec3;
}

// 피격정보
table HittingInfo {
    uuid:string;
    damage:int;
}

// Enter World
// 게임 입장 요청 첫번째 시퀀스
table Request_EnterWorld {
    character_id:int;
}
// 게임 입장 실패
table Reply_EnterWorldFailed {
    error_code:ErrorCode;
}
// 게임 입장 성공
table Reply_EnterWorldSuccess {
}

// 게임 월드 로직 에러 메시지.
table Notify_WorldLogicError {
    error_code:ErrorCode;
}

// 게임 입장 요청 두번째 시퀀스. 클라이언트에서 world 씬 로드가 완료되면 보낸다.
table Request_EnterWorldNext {
}
table Reply_EnterWorldNextSuccess {
    player_character:PlayerCharacter;
}
table Reply_EnterWorldNextFailed {
    error_code:ErrorCode;
}

// 캐릭터가 지역에 들어가면 통지 한다.
table Notify_EnterZone {
    map_id:int;
    move:MoveInfo;
}

// Action
// 로컬 케릭터의 이동을 보낸다.
table Request_Move {
    move:MoveInfo;
}
// 로컬 케릭터의 공격을 보낸다.
table Request_Attack {
    rotation:float;
}

// 케릭터의 이동 통지
table Notify_Move {
    uuid:string;
    move:MoveInfo;
}
// 케릭터의 공격 통지
table Notify_Attack {
    uuid:string;
    rotation:float;
}
// 피격 통지
table Notify_Hit {
    hit_list:[HittingInfo];
}

// 원격 캐릭터 스폰
table Notify_AppearActor {
    remote_pc:[RemotePC];
    monster:[Monster];
}
// 원격 태릭터 삭제
table Notify_DisappearActor {
    uuids:[string];
}

namespace protocol;

// 메시지 타입을 정의 한다 ================================================
union MessageT {
    Notify_UnauthedAccess,
    login.Request_Login,
    login.Reply_LoginFailed,
    login.Reply_LoginSuccess,
    login.Request_Join,
    login.Reply_JoinFailed,
    login.Reply_JoinSuccess,
    login.Request_CharacterList,
    login.Reply_CharacterList,
    login.Request_CreateCharacter,
    login.Reply_CreateCharacterFailed,
    login.Reply_CreateCharacterSuccess,
    login.Request_DeleteCharacter,
    login.Reply_DeleteCharacterFailed,
    login.Reply_DeleteCharacterSuccess,
    world.Request_EnterWorld,
    world.Reply_EnterWorldFailed,
    world.Reply_EnterWorldSuccess,
    world.Request_EnterWorldNext,
    world.Reply_EnterWorldNextFailed,
    world.Reply_EnterWorldNextSuccess,
    world.Notify_WorldLogicError,
    world.Notify_EnterZone,
    world.Notify_AppearActor,
    world.Notify_DisappearActor,
    world.Request_Move,
    world.Request_Attack,
    world.Notify_Move,
    world.Notify_Attack,
    world.Notify_Hit,
}

// 기본 네트워크 메시지 =================================================================
table NetMessage {
    message:MessageT; // Union
}

root_type NetMessage;