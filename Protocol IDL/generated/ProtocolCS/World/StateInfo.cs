// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ProtocolCS.World
{

using global::System;
using global::FlatBuffers;

public struct StateInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StateInfo GetRootAsStateInfo(ByteBuffer _bb) { return GetRootAsStateInfo(_bb, new StateInfo()); }
  public static StateInfo GetRootAsStateInfo(ByteBuffer _bb, StateInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StateInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EntityId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEntityIdBytes() { return __p.__vector_as_arraysegment(4); }
  public int StateId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateStateId(int state_id) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, state_id); return true; } else { return false; } }

  public static Offset<StateInfo> CreateStateInfo(FlatBufferBuilder builder,
      StringOffset entity_idOffset = default(StringOffset),
      int state_id = 0) {
    builder.StartObject(2);
    StateInfo.AddStateId(builder, state_id);
    StateInfo.AddEntityId(builder, entity_idOffset);
    return StateInfo.EndStateInfo(builder);
  }

  public static void StartStateInfo(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEntityId(FlatBufferBuilder builder, StringOffset entityIdOffset) { builder.AddOffset(0, entityIdOffset.Value, 0); }
  public static void AddStateId(FlatBufferBuilder builder, int stateId) { builder.AddInt(1, stateId, 0); }
  public static Offset<StateInfo> EndStateInfo(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StateInfo>(o);
  }
};


}
