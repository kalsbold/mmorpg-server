// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "error_code_generated.h"
#include "game_generated.h"
#include "login_generated.h"
#include "manager_generated.h"

namespace protocol {

struct NetMessage;
struct NetMessageT;

enum MessageT {
  MessageT_NONE = 0,
  MessageT_common_UnauthedAccess = 1000,
  MessageT_login_RequestLogin = 2000,
  MessageT_login_ResponseLoginFailed = 2001,
  MessageT_login_ResponseLoginSuccess = 2002,
  MessageT_login_RequestJoin = 2003,
  MessageT_login_ResponseJoinFailed = 2004,
  MessageT_login_ResponseJoinSuccess = 2005,
  MessageT_login_RequestCharacterList = 2006,
  MessageT_login_ResponseCharacterList = 2007,
  MessageT_login_RequestCreateCharacter = 2008,
  MessageT_login_ResponseCreateCharacterFailed = 2009,
  MessageT_login_ResponseCreateCharacterSuccess = 2010,
  MessageT_login_RequestDeleteCharacter = 2011,
  MessageT_login_ResponseDeleteCharacterFailed = 2012,
  MessageT_login_ResponseDeleteCharacterSuccess = 2013,
  MessageT_game_RequestEnterGame = 3000,
  MessageT_game_ResponseEnterGameFailed = 3001,
  MessageT_game_ResponseEnterGameSuccess = 3002,
  MessageT_game_SpawnCharacter = 3003,
  MessageT_game_MoveCharacter = 3004,
  MessageT_manager_RequestLogin = 4000,
  MessageT_manager_ResponseLoginFailed = 4001,
  MessageT_manager_ResponseLoginSuccess = 4002,
  MessageT_MIN = MessageT_NONE,
  MessageT_MAX = MessageT_manager_ResponseLoginSuccess
};

template<typename T> struct MessageTTraits {
  static const MessageT enum_value = MessageT_NONE;
};

template<> struct MessageTTraits<protocol::common::UnauthedAccess> {
  static const MessageT enum_value = MessageT_common_UnauthedAccess;
};

template<> struct MessageTTraits<protocol::login::RequestLogin> {
  static const MessageT enum_value = MessageT_login_RequestLogin;
};

template<> struct MessageTTraits<protocol::login::ResponseLoginFailed> {
  static const MessageT enum_value = MessageT_login_ResponseLoginFailed;
};

template<> struct MessageTTraits<protocol::login::ResponseLoginSuccess> {
  static const MessageT enum_value = MessageT_login_ResponseLoginSuccess;
};

template<> struct MessageTTraits<protocol::login::RequestJoin> {
  static const MessageT enum_value = MessageT_login_RequestJoin;
};

template<> struct MessageTTraits<protocol::login::ResponseJoinFailed> {
  static const MessageT enum_value = MessageT_login_ResponseJoinFailed;
};

template<> struct MessageTTraits<protocol::login::ResponseJoinSuccess> {
  static const MessageT enum_value = MessageT_login_ResponseJoinSuccess;
};

template<> struct MessageTTraits<protocol::login::RequestCharacterList> {
  static const MessageT enum_value = MessageT_login_RequestCharacterList;
};

template<> struct MessageTTraits<protocol::login::ResponseCharacterList> {
  static const MessageT enum_value = MessageT_login_ResponseCharacterList;
};

template<> struct MessageTTraits<protocol::login::RequestCreateCharacter> {
  static const MessageT enum_value = MessageT_login_RequestCreateCharacter;
};

template<> struct MessageTTraits<protocol::login::ResponseCreateCharacterFailed> {
  static const MessageT enum_value = MessageT_login_ResponseCreateCharacterFailed;
};

template<> struct MessageTTraits<protocol::login::ResponseCreateCharacterSuccess> {
  static const MessageT enum_value = MessageT_login_ResponseCreateCharacterSuccess;
};

template<> struct MessageTTraits<protocol::login::RequestDeleteCharacter> {
  static const MessageT enum_value = MessageT_login_RequestDeleteCharacter;
};

template<> struct MessageTTraits<protocol::login::ResponseDeleteCharacterFailed> {
  static const MessageT enum_value = MessageT_login_ResponseDeleteCharacterFailed;
};

template<> struct MessageTTraits<protocol::login::ResponseDeleteCharacterSuccess> {
  static const MessageT enum_value = MessageT_login_ResponseDeleteCharacterSuccess;
};

template<> struct MessageTTraits<protocol::game::RequestEnterGame> {
  static const MessageT enum_value = MessageT_game_RequestEnterGame;
};

template<> struct MessageTTraits<protocol::game::ResponseEnterGameFailed> {
  static const MessageT enum_value = MessageT_game_ResponseEnterGameFailed;
};

template<> struct MessageTTraits<protocol::game::ResponseEnterGameSuccess> {
  static const MessageT enum_value = MessageT_game_ResponseEnterGameSuccess;
};

template<> struct MessageTTraits<protocol::game::SpawnCharacter> {
  static const MessageT enum_value = MessageT_game_SpawnCharacter;
};

template<> struct MessageTTraits<protocol::game::MoveCharacter> {
  static const MessageT enum_value = MessageT_game_MoveCharacter;
};

template<> struct MessageTTraits<protocol::manager::RequestLogin> {
  static const MessageT enum_value = MessageT_manager_RequestLogin;
};

template<> struct MessageTTraits<protocol::manager::ResponseLoginFailed> {
  static const MessageT enum_value = MessageT_manager_ResponseLoginFailed;
};

template<> struct MessageTTraits<protocol::manager::ResponseLoginSuccess> {
  static const MessageT enum_value = MessageT_manager_ResponseLoginSuccess;
};

struct MessageTUnion {
  MessageT type;
  flatbuffers::NativeTable *table;

  MessageTUnion() : type(MessageT_NONE), table(nullptr) {}
  MessageTUnion(const MessageTUnion &);
  MessageTUnion &operator=(const MessageTUnion &);
  ~MessageTUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& value) {
    Reset();
    type = MessageTTraits<typename T::TableType>::enum_value;
    if (type != MessageT_NONE) {
      table = new T(std::forward<T>(value));
    }
  }

  static flatbuffers::NativeTable *UnPack(const void *obj, MessageT type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  protocol::common::UnauthedAccessT *Ascommon_UnauthedAccess() {
    return type == MessageT_common_UnauthedAccess ?
      reinterpret_cast<protocol::common::UnauthedAccessT *>(table) : nullptr;
  }
  protocol::login::RequestLoginT *Aslogin_RequestLogin() {
    return type == MessageT_login_RequestLogin ?
      reinterpret_cast<protocol::login::RequestLoginT *>(table) : nullptr;
  }
  protocol::login::ResponseLoginFailedT *Aslogin_ResponseLoginFailed() {
    return type == MessageT_login_ResponseLoginFailed ?
      reinterpret_cast<protocol::login::ResponseLoginFailedT *>(table) : nullptr;
  }
  protocol::login::ResponseLoginSuccessT *Aslogin_ResponseLoginSuccess() {
    return type == MessageT_login_ResponseLoginSuccess ?
      reinterpret_cast<protocol::login::ResponseLoginSuccessT *>(table) : nullptr;
  }
  protocol::login::RequestJoinT *Aslogin_RequestJoin() {
    return type == MessageT_login_RequestJoin ?
      reinterpret_cast<protocol::login::RequestJoinT *>(table) : nullptr;
  }
  protocol::login::ResponseJoinFailedT *Aslogin_ResponseJoinFailed() {
    return type == MessageT_login_ResponseJoinFailed ?
      reinterpret_cast<protocol::login::ResponseJoinFailedT *>(table) : nullptr;
  }
  protocol::login::ResponseJoinSuccessT *Aslogin_ResponseJoinSuccess() {
    return type == MessageT_login_ResponseJoinSuccess ?
      reinterpret_cast<protocol::login::ResponseJoinSuccessT *>(table) : nullptr;
  }
  protocol::login::RequestCharacterListT *Aslogin_RequestCharacterList() {
    return type == MessageT_login_RequestCharacterList ?
      reinterpret_cast<protocol::login::RequestCharacterListT *>(table) : nullptr;
  }
  protocol::login::ResponseCharacterListT *Aslogin_ResponseCharacterList() {
    return type == MessageT_login_ResponseCharacterList ?
      reinterpret_cast<protocol::login::ResponseCharacterListT *>(table) : nullptr;
  }
  protocol::login::RequestCreateCharacterT *Aslogin_RequestCreateCharacter() {
    return type == MessageT_login_RequestCreateCharacter ?
      reinterpret_cast<protocol::login::RequestCreateCharacterT *>(table) : nullptr;
  }
  protocol::login::ResponseCreateCharacterFailedT *Aslogin_ResponseCreateCharacterFailed() {
    return type == MessageT_login_ResponseCreateCharacterFailed ?
      reinterpret_cast<protocol::login::ResponseCreateCharacterFailedT *>(table) : nullptr;
  }
  protocol::login::ResponseCreateCharacterSuccessT *Aslogin_ResponseCreateCharacterSuccess() {
    return type == MessageT_login_ResponseCreateCharacterSuccess ?
      reinterpret_cast<protocol::login::ResponseCreateCharacterSuccessT *>(table) : nullptr;
  }
  protocol::login::RequestDeleteCharacterT *Aslogin_RequestDeleteCharacter() {
    return type == MessageT_login_RequestDeleteCharacter ?
      reinterpret_cast<protocol::login::RequestDeleteCharacterT *>(table) : nullptr;
  }
  protocol::login::ResponseDeleteCharacterFailedT *Aslogin_ResponseDeleteCharacterFailed() {
    return type == MessageT_login_ResponseDeleteCharacterFailed ?
      reinterpret_cast<protocol::login::ResponseDeleteCharacterFailedT *>(table) : nullptr;
  }
  protocol::login::ResponseDeleteCharacterSuccessT *Aslogin_ResponseDeleteCharacterSuccess() {
    return type == MessageT_login_ResponseDeleteCharacterSuccess ?
      reinterpret_cast<protocol::login::ResponseDeleteCharacterSuccessT *>(table) : nullptr;
  }
  protocol::game::RequestEnterGameT *Asgame_RequestEnterGame() {
    return type == MessageT_game_RequestEnterGame ?
      reinterpret_cast<protocol::game::RequestEnterGameT *>(table) : nullptr;
  }
  protocol::game::ResponseEnterGameFailedT *Asgame_ResponseEnterGameFailed() {
    return type == MessageT_game_ResponseEnterGameFailed ?
      reinterpret_cast<protocol::game::ResponseEnterGameFailedT *>(table) : nullptr;
  }
  protocol::game::ResponseEnterGameSuccessT *Asgame_ResponseEnterGameSuccess() {
    return type == MessageT_game_ResponseEnterGameSuccess ?
      reinterpret_cast<protocol::game::ResponseEnterGameSuccessT *>(table) : nullptr;
  }
  protocol::game::SpawnCharacterT *Asgame_SpawnCharacter() {
    return type == MessageT_game_SpawnCharacter ?
      reinterpret_cast<protocol::game::SpawnCharacterT *>(table) : nullptr;
  }
  protocol::game::MoveCharacterT *Asgame_MoveCharacter() {
    return type == MessageT_game_MoveCharacter ?
      reinterpret_cast<protocol::game::MoveCharacterT *>(table) : nullptr;
  }
  protocol::manager::RequestLoginT *Asmanager_RequestLogin() {
    return type == MessageT_manager_RequestLogin ?
      reinterpret_cast<protocol::manager::RequestLoginT *>(table) : nullptr;
  }
  protocol::manager::ResponseLoginFailedT *Asmanager_ResponseLoginFailed() {
    return type == MessageT_manager_ResponseLoginFailed ?
      reinterpret_cast<protocol::manager::ResponseLoginFailedT *>(table) : nullptr;
  }
  protocol::manager::ResponseLoginSuccessT *Asmanager_ResponseLoginSuccess() {
    return type == MessageT_manager_ResponseLoginSuccess ?
      reinterpret_cast<protocol::manager::ResponseLoginSuccessT *>(table) : nullptr;
  }
};

bool VerifyMessageT(flatbuffers::Verifier &verifier, const void *obj, MessageT type);

struct NetMessageT : public flatbuffers::NativeTable {
  typedef NetMessage TableType;
  MessageTUnion message;
  NetMessageT() {
  }
};

struct NetMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NetMessageT NativeTableType;
  enum {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  MessageT message_type() const {
    return static_cast<MessageT>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           VerifyMessageT(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
  NetMessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(NetMessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<NetMessage> Pack(flatbuffers::FlatBufferBuilder &_fbb, const NetMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct NetMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(MessageT message_type) {
    fbb_.AddElement<uint8_t>(NetMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(NetMessage::VT_MESSAGE, message);
  }
  NetMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NetMessageBuilder &operator=(const NetMessageBuilder &);
  flatbuffers::Offset<NetMessage> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<NetMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetMessage> CreateNetMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageT message_type = MessageT_NONE,
    flatbuffers::Offset<void> message = 0) {
  NetMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

flatbuffers::Offset<NetMessage> CreateNetMessage(flatbuffers::FlatBufferBuilder &_fbb, const NetMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline NetMessageT *NetMessage::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new NetMessageT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void NetMessage::UnPackTo(NetMessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message_type(); _o->message.type = _e; };
  { auto _e = message(); if (_e) _o->message.table = MessageTUnion::UnPack(_e, message_type(),_resolver); };
}

inline flatbuffers::Offset<NetMessage> NetMessage::Pack(flatbuffers::FlatBufferBuilder &_fbb, const NetMessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateNetMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<NetMessage> CreateNetMessage(flatbuffers::FlatBufferBuilder &_fbb, const NetMessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  auto _message_type = _o->message.type;
  auto _message = _o->message.Pack(_fbb);
  return CreateNetMessage(
      _fbb,
      _message_type,
      _message);
}

inline bool VerifyMessageT(flatbuffers::Verifier &verifier, const void *obj, MessageT type) {
  switch (type) {
    case MessageT_NONE: {
      return true;
    }
    case MessageT_common_UnauthedAccess: {
      auto ptr = reinterpret_cast<const protocol::common::UnauthedAccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestLogin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_RequestJoin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestJoin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseJoinFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseJoinSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_RequestCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCharacterList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCharacterList *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_RequestCreateCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCreateCharacter *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseCreateCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseCreateCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_RequestDeleteCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestDeleteCharacter *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseDeleteCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_login_ResponseDeleteCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_game_RequestEnterGame: {
      auto ptr = reinterpret_cast<const protocol::game::RequestEnterGame *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_game_ResponseEnterGameFailed: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_game_ResponseEnterGameSuccess: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_game_SpawnCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::SpawnCharacter *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_game_MoveCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::MoveCharacter *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_manager_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::manager::RequestLogin *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_manager_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginFailed *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_manager_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginSuccess *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline flatbuffers::NativeTable *MessageTUnion::UnPack(const void *obj, MessageT type, const flatbuffers::resolver_function_t *resolver) {
  switch (type) {
    case MessageT_common_UnauthedAccess: {
      auto ptr = reinterpret_cast<const protocol::common::UnauthedAccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestLogin *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_RequestJoin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestJoin *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseJoinFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseJoinSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_RequestCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCharacterList *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCharacterList *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_RequestCreateCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCreateCharacter *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseCreateCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseCreateCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_RequestDeleteCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestDeleteCharacter *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseDeleteCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_login_ResponseDeleteCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_game_RequestEnterGame: {
      auto ptr = reinterpret_cast<const protocol::game::RequestEnterGame *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_game_ResponseEnterGameFailed: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_game_ResponseEnterGameSuccess: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_game_SpawnCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::SpawnCharacter *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_game_MoveCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::MoveCharacter *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_manager_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::manager::RequestLogin *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_manager_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginFailed *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageT_manager_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginSuccess *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> MessageTUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  switch (type) {
    case MessageT_common_UnauthedAccess: {
      auto ptr = reinterpret_cast<const protocol::common::UnauthedAccessT *>(table);
      return CreateUnauthedAccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestLoginT *>(table);
      return CreateRequestLogin(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginFailedT *>(table);
      return CreateResponseLoginFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseLoginSuccessT *>(table);
      return CreateResponseLoginSuccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_RequestJoin: {
      auto ptr = reinterpret_cast<const protocol::login::RequestJoinT *>(table);
      return CreateRequestJoin(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseJoinFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinFailedT *>(table);
      return CreateResponseJoinFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseJoinSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseJoinSuccessT *>(table);
      return CreateResponseJoinSuccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_RequestCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCharacterListT *>(table);
      return CreateRequestCharacterList(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseCharacterList: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCharacterListT *>(table);
      return CreateResponseCharacterList(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_RequestCreateCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestCreateCharacterT *>(table);
      return CreateRequestCreateCharacter(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseCreateCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterFailedT *>(table);
      return CreateResponseCreateCharacterFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseCreateCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseCreateCharacterSuccessT *>(table);
      return CreateResponseCreateCharacterSuccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_RequestDeleteCharacter: {
      auto ptr = reinterpret_cast<const protocol::login::RequestDeleteCharacterT *>(table);
      return CreateRequestDeleteCharacter(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseDeleteCharacterFailed: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterFailedT *>(table);
      return CreateResponseDeleteCharacterFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_login_ResponseDeleteCharacterSuccess: {
      auto ptr = reinterpret_cast<const protocol::login::ResponseDeleteCharacterSuccessT *>(table);
      return CreateResponseDeleteCharacterSuccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_game_RequestEnterGame: {
      auto ptr = reinterpret_cast<const protocol::game::RequestEnterGameT *>(table);
      return CreateRequestEnterGame(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_game_ResponseEnterGameFailed: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameFailedT *>(table);
      return CreateResponseEnterGameFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_game_ResponseEnterGameSuccess: {
      auto ptr = reinterpret_cast<const protocol::game::ResponseEnterGameSuccessT *>(table);
      return CreateResponseEnterGameSuccess(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_game_SpawnCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::SpawnCharacterT *>(table);
      return CreateSpawnCharacter(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_game_MoveCharacter: {
      auto ptr = reinterpret_cast<const protocol::game::MoveCharacterT *>(table);
      return CreateMoveCharacter(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_manager_RequestLogin: {
      auto ptr = reinterpret_cast<const protocol::manager::RequestLoginT *>(table);
      return CreateRequestLogin(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_manager_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginFailedT *>(table);
      return CreateResponseLoginFailed(_fbb, ptr, _rehasher).Union();
    }
    case MessageT_manager_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<const protocol::manager::ResponseLoginSuccessT *>(table);
      return CreateResponseLoginSuccess(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline void MessageTUnion::Reset() {
  switch (type) {
    case MessageT_common_UnauthedAccess: {
      auto ptr = reinterpret_cast<protocol::common::UnauthedAccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_RequestLogin: {
      auto ptr = reinterpret_cast<protocol::login::RequestLoginT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<protocol::login::ResponseLoginFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<protocol::login::ResponseLoginSuccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_RequestJoin: {
      auto ptr = reinterpret_cast<protocol::login::RequestJoinT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseJoinFailed: {
      auto ptr = reinterpret_cast<protocol::login::ResponseJoinFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseJoinSuccess: {
      auto ptr = reinterpret_cast<protocol::login::ResponseJoinSuccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_RequestCharacterList: {
      auto ptr = reinterpret_cast<protocol::login::RequestCharacterListT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseCharacterList: {
      auto ptr = reinterpret_cast<protocol::login::ResponseCharacterListT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_RequestCreateCharacter: {
      auto ptr = reinterpret_cast<protocol::login::RequestCreateCharacterT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseCreateCharacterFailed: {
      auto ptr = reinterpret_cast<protocol::login::ResponseCreateCharacterFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseCreateCharacterSuccess: {
      auto ptr = reinterpret_cast<protocol::login::ResponseCreateCharacterSuccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_RequestDeleteCharacter: {
      auto ptr = reinterpret_cast<protocol::login::RequestDeleteCharacterT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseDeleteCharacterFailed: {
      auto ptr = reinterpret_cast<protocol::login::ResponseDeleteCharacterFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_login_ResponseDeleteCharacterSuccess: {
      auto ptr = reinterpret_cast<protocol::login::ResponseDeleteCharacterSuccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_game_RequestEnterGame: {
      auto ptr = reinterpret_cast<protocol::game::RequestEnterGameT *>(table);
      delete ptr;
      break;
    }
    case MessageT_game_ResponseEnterGameFailed: {
      auto ptr = reinterpret_cast<protocol::game::ResponseEnterGameFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_game_ResponseEnterGameSuccess: {
      auto ptr = reinterpret_cast<protocol::game::ResponseEnterGameSuccessT *>(table);
      delete ptr;
      break;
    }
    case MessageT_game_SpawnCharacter: {
      auto ptr = reinterpret_cast<protocol::game::SpawnCharacterT *>(table);
      delete ptr;
      break;
    }
    case MessageT_game_MoveCharacter: {
      auto ptr = reinterpret_cast<protocol::game::MoveCharacterT *>(table);
      delete ptr;
      break;
    }
    case MessageT_manager_RequestLogin: {
      auto ptr = reinterpret_cast<protocol::manager::RequestLoginT *>(table);
      delete ptr;
      break;
    }
    case MessageT_manager_ResponseLoginFailed: {
      auto ptr = reinterpret_cast<protocol::manager::ResponseLoginFailedT *>(table);
      delete ptr;
      break;
    }
    case MessageT_manager_ResponseLoginSuccess: {
      auto ptr = reinterpret_cast<protocol::manager::ResponseLoginSuccessT *>(table);
      delete ptr;
      break;
    }
    default: break;
  }
  table = nullptr;
  type = MessageT_NONE;
}

inline const protocol::NetMessage *GetNetMessage(const void *buf) {
  return flatbuffers::GetRoot<protocol::NetMessage>(buf);
}

inline bool VerifyNetMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::NetMessage>(nullptr);
}

inline void FinishNetMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<protocol::NetMessage> root) {
  fbb.Finish(root);
}

inline std::unique_ptr<NetMessageT> UnPackNetMessage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<NetMessageT>(GetNetMessage(buf)->UnPack(res));
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_PROTOCOL_PROTOCOL_H_
