// automatically generated by the FlatBuffers compiler, do not modify

namespace protocol.login
{

using System;
using FlatBuffers;

public struct ReplyCharacterList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReplyCharacterList GetRootAsReplyCharacterList(ByteBuffer _bb) { return GetRootAsReplyCharacterList(_bb, new ReplyCharacterList()); }
  public static ReplyCharacterList GetRootAsReplyCharacterList(ByteBuffer _bb, ReplyCharacterList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReplyCharacterList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Character? List(int j) { int o = __p.__offset(4); return o != 0 ? (Character?)(new Character()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ReplyCharacterList> CreateReplyCharacterList(FlatBufferBuilder builder,
      VectorOffset listOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ReplyCharacterList.AddList(builder, listOffset);
    return ReplyCharacterList.EndReplyCharacterList(builder);
  }

  public static void StartReplyCharacterList(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddList(FlatBufferBuilder builder, VectorOffset listOffset) { builder.AddOffset(0, listOffset.Value, 0); }
  public static VectorOffset CreateListVector(FlatBufferBuilder builder, Offset<Character>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ReplyCharacterList> EndReplyCharacterList(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReplyCharacterList>(o);
  }
};


}
