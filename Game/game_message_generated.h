// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEMESSAGE_GAME_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_GAMEMESSAGE_GAME_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace Game {
namespace Protocol {

struct Vec2;

struct Vec3;

struct HeroInfoSimple;

struct HeroInfo;

struct JoinRequest;

struct JoinFailedReply;

struct JoinSuccessReply;

struct LoginRequest;

struct LoginFailedReply;

struct LoginSuccessReply;

struct HeroListRequest;

struct HeroListReply;

struct SelectHeroRequest;

struct SelectHeroFailedReply;

struct SelectHeroSuccessReply;

struct CreateHeroRequest;

struct CreateHeroFailedReply;

struct CreateHeroSuccessReply;

struct RemoveHeroRequest;

struct RemoveHeroFailedReply;

struct RemoveHeroSuccessReply;

struct NetMessage;

enum ErrorCode {
  ErrorCode_OK = 0,
  ErrorCode_FATAL_ERROR = 1,
  ErrorCode_JOIN_ACC_NAME_ALREADY = 100,
  ErrorCode_JOIN_CANNOT_ACC_CREATE = 101,
  ErrorCode_LOGIN_INCORRECT_ACC_NAME_OR_PASSWORD = 200,
  ErrorCode_LOGIN_ALREADY = 201,
  ErrorCode_MIN = ErrorCode_OK,
  ErrorCode_MAX = ErrorCode_LOGIN_ALREADY
};

enum MessageT {
  MessageT_NONE = 0,
  MessageT_LoginRequest = 1,
  MessageT_LoginFailedReply = 2,
  MessageT_LoginSuccessReply = 3,
  MessageT_JoinRequest = 4,
  MessageT_JoinFailedReply = 5,
  MessageT_JoinSuccessReply = 6,
  MessageT_MIN = MessageT_NONE,
  MessageT_MAX = MessageT_JoinSuccessReply
};

inline const char **EnumNamesMessageT() {
  static const char *names[] = {
    "NONE",
    "LoginRequest",
    "LoginFailedReply",
    "LoginSuccessReply",
    "JoinRequest",
    "JoinFailedReply",
    "JoinSuccessReply",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageT(MessageT e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageT()[index];
}

template<typename T> struct MessageTTraits {
  static const MessageT enum_value = MessageT_NONE;
};

template<> struct MessageTTraits<LoginRequest> {
  static const MessageT enum_value = MessageT_LoginRequest;
};

template<> struct MessageTTraits<LoginFailedReply> {
  static const MessageT enum_value = MessageT_LoginFailedReply;
};

template<> struct MessageTTraits<LoginSuccessReply> {
  static const MessageT enum_value = MessageT_LoginSuccessReply;
};

template<> struct MessageTTraits<JoinRequest> {
  static const MessageT enum_value = MessageT_JoinRequest;
};

template<> struct MessageTTraits<JoinFailedReply> {
  static const MessageT enum_value = MessageT_JoinFailedReply;
};

template<> struct MessageTTraits<JoinSuccessReply> {
  static const MessageT enum_value = MessageT_JoinSuccessReply;
};

bool VerifyMessageT(flatbuffers::Verifier &verifier, const void *obj, MessageT type);

MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2() {
    memset(this, 0, sizeof(Vec2));
  }
  Vec2(const Vec2 &_o) {
    memcpy(this, &_o, sizeof(Vec2));
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
STRUCT_END(Vec2, 8);

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(const Vec3 &_o) {
    memcpy(this, &_o, sizeof(Vec3));
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 12);

struct HeroInfoSimple FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_CLASS_TYPE = 8,
    VT_LEVEL = 10
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t class_type() const {
    return GetField<int32_t>(VT_CLASS_TYPE, 0);
  }
  int32_t level() const {
    return GetField<int32_t>(VT_LEVEL, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_CLASS_TYPE) &&
           VerifyField<int32_t>(verifier, VT_LEVEL) &&
           verifier.EndTable();
  }
};

struct HeroInfoSimpleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(HeroInfoSimple::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HeroInfoSimple::VT_NAME, name);
  }
  void add_class_type(int32_t class_type) {
    fbb_.AddElement<int32_t>(HeroInfoSimple::VT_CLASS_TYPE, class_type, 0);
  }
  void add_level(int32_t level) {
    fbb_.AddElement<int32_t>(HeroInfoSimple::VT_LEVEL, level, 0);
  }
  HeroInfoSimpleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroInfoSimpleBuilder &operator=(const HeroInfoSimpleBuilder &);
  flatbuffers::Offset<HeroInfoSimple> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<HeroInfoSimple>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroInfoSimple> CreateHeroInfoSimple(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t class_type = 0,
    int32_t level = 0) {
  HeroInfoSimpleBuilder builder_(_fbb);
  builder_.add_level(level);
  builder_.add_class_type(class_type);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeroInfoSimple> CreateHeroInfoSimpleDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    int32_t class_type = 0,
    int32_t level = 0) {
  return CreateHeroInfoSimple(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      class_type,
      level);
}

struct HeroInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_NAME = 6,
    VT_CLASS_TYPE = 8,
    VT_EXP = 10,
    VT_LEVEL = 12,
    VT_HP = 14,
    VT_MP = 16,
    VT_ATT = 18,
    VT_DEF = 20,
    VT_ZONE_ID = 22,
    VT_POS = 24,
    VT_DIRECTION = 26
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t class_type() const {
    return GetField<int32_t>(VT_CLASS_TYPE, 0);
  }
  int32_t exp() const {
    return GetField<int32_t>(VT_EXP, 0);
  }
  int32_t level() const {
    return GetField<int32_t>(VT_LEVEL, 0);
  }
  int32_t hp() const {
    return GetField<int32_t>(VT_HP, 0);
  }
  int32_t mp() const {
    return GetField<int32_t>(VT_MP, 0);
  }
  int32_t att() const {
    return GetField<int32_t>(VT_ATT, 0);
  }
  int32_t def() const {
    return GetField<int32_t>(VT_DEF, 0);
  }
  int32_t zone_id() const {
    return GetField<int32_t>(VT_ZONE_ID, 0);
  }
  const Vec2 *pos() const {
    return GetStruct<const Vec2 *>(VT_POS);
  }
  const Vec2 *direction() const {
    return GetStruct<const Vec2 *>(VT_DIRECTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_CLASS_TYPE) &&
           VerifyField<int32_t>(verifier, VT_EXP) &&
           VerifyField<int32_t>(verifier, VT_LEVEL) &&
           VerifyField<int32_t>(verifier, VT_HP) &&
           VerifyField<int32_t>(verifier, VT_MP) &&
           VerifyField<int32_t>(verifier, VT_ATT) &&
           VerifyField<int32_t>(verifier, VT_DEF) &&
           VerifyField<int32_t>(verifier, VT_ZONE_ID) &&
           VerifyField<Vec2>(verifier, VT_POS) &&
           VerifyField<Vec2>(verifier, VT_DIRECTION) &&
           verifier.EndTable();
  }
};

struct HeroInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_ID, id, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(HeroInfo::VT_NAME, name);
  }
  void add_class_type(int32_t class_type) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_CLASS_TYPE, class_type, 0);
  }
  void add_exp(int32_t exp) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_EXP, exp, 0);
  }
  void add_level(int32_t level) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_LEVEL, level, 0);
  }
  void add_hp(int32_t hp) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_HP, hp, 0);
  }
  void add_mp(int32_t mp) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_MP, mp, 0);
  }
  void add_att(int32_t att) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_ATT, att, 0);
  }
  void add_def(int32_t def) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_DEF, def, 0);
  }
  void add_zone_id(int32_t zone_id) {
    fbb_.AddElement<int32_t>(HeroInfo::VT_ZONE_ID, zone_id, 0);
  }
  void add_pos(const Vec2 *pos) {
    fbb_.AddStruct(HeroInfo::VT_POS, pos);
  }
  void add_direction(const Vec2 *direction) {
    fbb_.AddStruct(HeroInfo::VT_DIRECTION, direction);
  }
  HeroInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroInfoBuilder &operator=(const HeroInfoBuilder &);
  flatbuffers::Offset<HeroInfo> Finish() {
    const auto end = fbb_.EndTable(start_, 12);
    auto o = flatbuffers::Offset<HeroInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroInfo> CreateHeroInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t class_type = 0,
    int32_t exp = 0,
    int32_t level = 0,
    int32_t hp = 0,
    int32_t mp = 0,
    int32_t att = 0,
    int32_t def = 0,
    int32_t zone_id = 0,
    const Vec2 *pos = 0,
    const Vec2 *direction = 0) {
  HeroInfoBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pos(pos);
  builder_.add_zone_id(zone_id);
  builder_.add_def(def);
  builder_.add_att(att);
  builder_.add_mp(mp);
  builder_.add_hp(hp);
  builder_.add_level(level);
  builder_.add_exp(exp);
  builder_.add_class_type(class_type);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeroInfo> CreateHeroInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const char *name = nullptr,
    int32_t class_type = 0,
    int32_t exp = 0,
    int32_t level = 0,
    int32_t hp = 0,
    int32_t mp = 0,
    int32_t att = 0,
    int32_t def = 0,
    int32_t zone_id = 0,
    const Vec2 *pos = 0,
    const Vec2 *direction = 0) {
  return CreateHeroInfo(
      _fbb,
      id,
      name ? _fbb.CreateString(name) : 0,
      class_type,
      exp,
      level,
      hp,
      mp,
      att,
      def,
      zone_id,
      pos,
      direction);
}

struct JoinRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ACC_NAME = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *acc_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ACC_NAME);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ACC_NAME) &&
           verifier.Verify(acc_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PASSWORD) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct JoinRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_acc_name(flatbuffers::Offset<flatbuffers::String> acc_name) {
    fbb_.AddOffset(JoinRequest::VT_ACC_NAME, acc_name);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(JoinRequest::VT_PASSWORD, password);
  }
  JoinRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinRequestBuilder &operator=(const JoinRequestBuilder &);
  flatbuffers::Offset<JoinRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<JoinRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<JoinRequest> CreateJoinRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> acc_name = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  JoinRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_acc_name(acc_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<JoinRequest> CreateJoinRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *acc_name = nullptr,
    const char *password = nullptr) {
  return CreateJoinRequest(
      _fbb,
      acc_name ? _fbb.CreateString(acc_name) : 0,
      password ? _fbb.CreateString(password) : 0);
}

struct JoinFailedReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  ErrorCode error_code() const {
    return static_cast<ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct JoinFailedReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(ErrorCode error_code) {
    fbb_.AddElement<int32_t>(JoinFailedReply::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  JoinFailedReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinFailedReplyBuilder &operator=(const JoinFailedReplyBuilder &);
  flatbuffers::Offset<JoinFailedReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<JoinFailedReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<JoinFailedReply> CreateJoinFailedReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ErrorCode error_code = ErrorCode_OK) {
  JoinFailedReplyBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct JoinSuccessReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct JoinSuccessReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  JoinSuccessReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  JoinSuccessReplyBuilder &operator=(const JoinSuccessReplyBuilder &);
  flatbuffers::Offset<JoinSuccessReply> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<JoinSuccessReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<JoinSuccessReply> CreateJoinSuccessReply(
    flatbuffers::FlatBufferBuilder &_fbb) {
  JoinSuccessReplyBuilder builder_(_fbb);
  return builder_.Finish();
}

struct LoginRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ACC_NAME = 4,
    VT_PASSWORD = 6
  };
  const flatbuffers::String *acc_name() const {
    return GetPointer<const flatbuffers::String *>(VT_ACC_NAME);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ACC_NAME) &&
           verifier.Verify(acc_name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PASSWORD) &&
           verifier.Verify(password()) &&
           verifier.EndTable();
  }
};

struct LoginRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_acc_name(flatbuffers::Offset<flatbuffers::String> acc_name) {
    fbb_.AddOffset(LoginRequest::VT_ACC_NAME, acc_name);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(LoginRequest::VT_PASSWORD, password);
  }
  LoginRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginRequestBuilder &operator=(const LoginRequestBuilder &);
  flatbuffers::Offset<LoginRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<LoginRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginRequest> CreateLoginRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> acc_name = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0) {
  LoginRequestBuilder builder_(_fbb);
  builder_.add_password(password);
  builder_.add_acc_name(acc_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginRequest> CreateLoginRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *acc_name = nullptr,
    const char *password = nullptr) {
  return CreateLoginRequest(
      _fbb,
      acc_name ? _fbb.CreateString(acc_name) : 0,
      password ? _fbb.CreateString(password) : 0);
}

struct LoginFailedReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  ErrorCode error_code() const {
    return static_cast<ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct LoginFailedReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(ErrorCode error_code) {
    fbb_.AddElement<int32_t>(LoginFailedReply::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  LoginFailedReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginFailedReplyBuilder &operator=(const LoginFailedReplyBuilder &);
  flatbuffers::Offset<LoginFailedReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<LoginFailedReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginFailedReply> CreateLoginFailedReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ErrorCode error_code = ErrorCode_OK) {
  LoginFailedReplyBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct LoginSuccessReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SESSION_ID = 4
  };
  const flatbuffers::String *session_id() const {
    return GetPointer<const flatbuffers::String *>(VT_SESSION_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SESSION_ID) &&
           verifier.Verify(session_id()) &&
           verifier.EndTable();
  }
};

struct LoginSuccessReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_session_id(flatbuffers::Offset<flatbuffers::String> session_id) {
    fbb_.AddOffset(LoginSuccessReply::VT_SESSION_ID, session_id);
  }
  LoginSuccessReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginSuccessReplyBuilder &operator=(const LoginSuccessReplyBuilder &);
  flatbuffers::Offset<LoginSuccessReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<LoginSuccessReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginSuccessReply> CreateLoginSuccessReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> session_id = 0) {
  LoginSuccessReplyBuilder builder_(_fbb);
  builder_.add_session_id(session_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginSuccessReply> CreateLoginSuccessReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *session_id = nullptr) {
  return CreateLoginSuccessReply(
      _fbb,
      session_id ? _fbb.CreateString(session_id) : 0);
}

struct HeroListRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct HeroListRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  HeroListRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroListRequestBuilder &operator=(const HeroListRequestBuilder &);
  flatbuffers::Offset<HeroListRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<HeroListRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroListRequest> CreateHeroListRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  HeroListRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct HeroListReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HERO_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<HeroInfoSimple>> *hero_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HeroInfoSimple>> *>(VT_HERO_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HERO_LIST) &&
           verifier.Verify(hero_list()) &&
           verifier.VerifyVectorOfTables(hero_list()) &&
           verifier.EndTable();
  }
};

struct HeroListReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HeroInfoSimple>>> hero_list) {
    fbb_.AddOffset(HeroListReply::VT_HERO_LIST, hero_list);
  }
  HeroListReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroListReplyBuilder &operator=(const HeroListReplyBuilder &);
  flatbuffers::Offset<HeroListReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<HeroListReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroListReply> CreateHeroListReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HeroInfoSimple>>> hero_list = 0) {
  HeroListReplyBuilder builder_(_fbb);
  builder_.add_hero_list(hero_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeroListReply> CreateHeroListReplyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<HeroInfoSimple>> *hero_list = nullptr) {
  return CreateHeroListReply(
      _fbb,
      hero_list ? _fbb.CreateVector<flatbuffers::Offset<HeroInfoSimple>>(*hero_list) : 0);
}

struct SelectHeroRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HERO_ID = 4
  };
  int32_t hero_id() const {
    return GetField<int32_t>(VT_HERO_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HERO_ID) &&
           verifier.EndTable();
  }
};

struct SelectHeroRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_id(int32_t hero_id) {
    fbb_.AddElement<int32_t>(SelectHeroRequest::VT_HERO_ID, hero_id, 0);
  }
  SelectHeroRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SelectHeroRequestBuilder &operator=(const SelectHeroRequestBuilder &);
  flatbuffers::Offset<SelectHeroRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<SelectHeroRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SelectHeroRequest> CreateSelectHeroRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t hero_id = 0) {
  SelectHeroRequestBuilder builder_(_fbb);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

struct SelectHeroFailedReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  ErrorCode error_code() const {
    return static_cast<ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct SelectHeroFailedReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(ErrorCode error_code) {
    fbb_.AddElement<int32_t>(SelectHeroFailedReply::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  SelectHeroFailedReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SelectHeroFailedReplyBuilder &operator=(const SelectHeroFailedReplyBuilder &);
  flatbuffers::Offset<SelectHeroFailedReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<SelectHeroFailedReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<SelectHeroFailedReply> CreateSelectHeroFailedReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ErrorCode error_code = ErrorCode_OK) {
  SelectHeroFailedReplyBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct SelectHeroSuccessReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct SelectHeroSuccessReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  SelectHeroSuccessReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SelectHeroSuccessReplyBuilder &operator=(const SelectHeroSuccessReplyBuilder &);
  flatbuffers::Offset<SelectHeroSuccessReply> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<SelectHeroSuccessReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<SelectHeroSuccessReply> CreateSelectHeroSuccessReply(
    flatbuffers::FlatBufferBuilder &_fbb) {
  SelectHeroSuccessReplyBuilder builder_(_fbb);
  return builder_.Finish();
}

struct CreateHeroRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_CLASS_TYPE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t class_type() const {
    return GetField<int32_t>(VT_CLASS_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_CLASS_TYPE) &&
           verifier.EndTable();
  }
};

struct CreateHeroRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(CreateHeroRequest::VT_NAME, name);
  }
  void add_class_type(int32_t class_type) {
    fbb_.AddElement<int32_t>(CreateHeroRequest::VT_CLASS_TYPE, class_type, 0);
  }
  CreateHeroRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreateHeroRequestBuilder &operator=(const CreateHeroRequestBuilder &);
  flatbuffers::Offset<CreateHeroRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<CreateHeroRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateHeroRequest> CreateCreateHeroRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t class_type = 0) {
  CreateHeroRequestBuilder builder_(_fbb);
  builder_.add_class_type(class_type);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreateHeroRequest> CreateCreateHeroRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t class_type = 0) {
  return CreateCreateHeroRequest(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      class_type);
}

struct CreateHeroFailedReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  ErrorCode error_code() const {
    return static_cast<ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct CreateHeroFailedReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(ErrorCode error_code) {
    fbb_.AddElement<int32_t>(CreateHeroFailedReply::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  CreateHeroFailedReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreateHeroFailedReplyBuilder &operator=(const CreateHeroFailedReplyBuilder &);
  flatbuffers::Offset<CreateHeroFailedReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<CreateHeroFailedReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateHeroFailedReply> CreateCreateHeroFailedReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ErrorCode error_code = ErrorCode_OK) {
  CreateHeroFailedReplyBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct CreateHeroSuccessReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HERO = 4
  };
  const HeroInfoSimple *hero() const {
    return GetPointer<const HeroInfoSimple *>(VT_HERO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HERO) &&
           verifier.VerifyTable(hero()) &&
           verifier.EndTable();
  }
};

struct CreateHeroSuccessReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero(flatbuffers::Offset<HeroInfoSimple> hero) {
    fbb_.AddOffset(CreateHeroSuccessReply::VT_HERO, hero);
  }
  CreateHeroSuccessReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CreateHeroSuccessReplyBuilder &operator=(const CreateHeroSuccessReplyBuilder &);
  flatbuffers::Offset<CreateHeroSuccessReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<CreateHeroSuccessReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateHeroSuccessReply> CreateCreateHeroSuccessReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<HeroInfoSimple> hero = 0) {
  CreateHeroSuccessReplyBuilder builder_(_fbb);
  builder_.add_hero(hero);
  return builder_.Finish();
}

struct RemoveHeroRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HERO_ID = 4
  };
  int32_t hero_id() const {
    return GetField<int32_t>(VT_HERO_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HERO_ID) &&
           verifier.EndTable();
  }
};

struct RemoveHeroRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_id(int32_t hero_id) {
    fbb_.AddElement<int32_t>(RemoveHeroRequest::VT_HERO_ID, hero_id, 0);
  }
  RemoveHeroRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveHeroRequestBuilder &operator=(const RemoveHeroRequestBuilder &);
  flatbuffers::Offset<RemoveHeroRequest> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<RemoveHeroRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveHeroRequest> CreateRemoveHeroRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t hero_id = 0) {
  RemoveHeroRequestBuilder builder_(_fbb);
  builder_.add_hero_id(hero_id);
  return builder_.Finish();
}

struct RemoveHeroFailedReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERROR_CODE = 4
  };
  ErrorCode error_code() const {
    return static_cast<ErrorCode>(GetField<int32_t>(VT_ERROR_CODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ERROR_CODE) &&
           verifier.EndTable();
  }
};

struct RemoveHeroFailedReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_code(ErrorCode error_code) {
    fbb_.AddElement<int32_t>(RemoveHeroFailedReply::VT_ERROR_CODE, static_cast<int32_t>(error_code), 0);
  }
  RemoveHeroFailedReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveHeroFailedReplyBuilder &operator=(const RemoveHeroFailedReplyBuilder &);
  flatbuffers::Offset<RemoveHeroFailedReply> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<RemoveHeroFailedReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveHeroFailedReply> CreateRemoveHeroFailedReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    ErrorCode error_code = ErrorCode_OK) {
  RemoveHeroFailedReplyBuilder builder_(_fbb);
  builder_.add_error_code(error_code);
  return builder_.Finish();
}

struct RemoveHeroSuccessReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct RemoveHeroSuccessReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  RemoveHeroSuccessReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveHeroSuccessReplyBuilder &operator=(const RemoveHeroSuccessReplyBuilder &);
  flatbuffers::Offset<RemoveHeroSuccessReply> Finish() {
    const auto end = fbb_.EndTable(start_, 0);
    auto o = flatbuffers::Offset<RemoveHeroSuccessReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveHeroSuccessReply> CreateRemoveHeroSuccessReply(
    flatbuffers::FlatBufferBuilder &_fbb) {
  RemoveHeroSuccessReplyBuilder builder_(_fbb);
  return builder_.Finish();
}

struct NetMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  MessageT message_type() const {
    return static_cast<MessageT>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           VerifyMessageT(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
};

struct NetMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(MessageT message_type) {
    fbb_.AddElement<uint8_t>(NetMessage::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(NetMessage::VT_MESSAGE, message);
  }
  NetMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  NetMessageBuilder &operator=(const NetMessageBuilder &);
  flatbuffers::Offset<NetMessage> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<NetMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<NetMessage> CreateNetMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageT message_type = MessageT_NONE,
    flatbuffers::Offset<void> message = 0) {
  NetMessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

inline bool VerifyMessageT(flatbuffers::Verifier &verifier, const void *obj, MessageT type) {
  switch (type) {
    case MessageT_NONE: {
      return true;
    }
    case MessageT_LoginRequest: {
      auto ptr = reinterpret_cast<const LoginRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_LoginFailedReply: {
      auto ptr = reinterpret_cast<const LoginFailedReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_LoginSuccessReply: {
      auto ptr = reinterpret_cast<const LoginSuccessReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_JoinRequest: {
      auto ptr = reinterpret_cast<const JoinRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_JoinFailedReply: {
      auto ptr = reinterpret_cast<const JoinFailedReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageT_JoinSuccessReply: {
      auto ptr = reinterpret_cast<const JoinSuccessReply *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline const Game::Protocol::NetMessage *GetNetMessage(const void *buf) {
  return flatbuffers::GetRoot<Game::Protocol::NetMessage>(buf);
}

inline bool VerifyNetMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Game::Protocol::NetMessage>(nullptr);
}

inline void FinishNetMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Game::Protocol::NetMessage> root) {
  fbb.Finish(root);
}

}  // namespace Protocol
}  // namespace Game

#endif  // FLATBUFFERS_GENERATED_GAMEMESSAGE_GAME_PROTOCOL_H_
