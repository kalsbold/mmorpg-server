// automatically generated by the FlatBuffers compiler, do not modify

namespace protocol.world
{

using System;
using FlatBuffers;

public struct NotifyMove : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NotifyMove GetRootAsNotifyMove(ByteBuffer _bb) { return GetRootAsNotifyMove(_bb, new NotifyMove()); }
  public static NotifyMove GetRootAsNotifyMove(ByteBuffer _bb, NotifyMove obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NotifyMove __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Uuid { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetUuidBytes() { return __p.__vector_as_arraysegment(4); }
  public float Rotation { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public protocol.Vec3? Pos { get { int o = __p.__offset(8); return o != 0 ? (protocol.Vec3?)(new protocol.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public protocol.Vec3? Velocity { get { int o = __p.__offset(10); return o != 0 ? (protocol.Vec3?)(new protocol.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartNotifyMove(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddUuid(FlatBufferBuilder builder, StringOffset uuidOffset) { builder.AddOffset(0, uuidOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(1, rotation, 0.0f); }
  public static void AddPos(FlatBufferBuilder builder, Offset<protocol.Vec3> posOffset) { builder.AddStruct(2, posOffset.Value, 0); }
  public static void AddVelocity(FlatBufferBuilder builder, Offset<protocol.Vec3> velocityOffset) { builder.AddStruct(3, velocityOffset.Value, 0); }
  public static Offset<NotifyMove> EndNotifyMove(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NotifyMove>(o);
  }
};


}
